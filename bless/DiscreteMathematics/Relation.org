* 9-1
Rn=R3 (see last paragraph of 9-1)

* 9-2
** Strange Words
- join
use what you select as primary key
- inner join
They are functionally equivalent, but INNER JOIN can be a bit clearer to read, especially if the query has other join types (i.e. LEFT or RIGHT or CROSS) included in it.
- intersection



* 9-3

** Matrix Calculate
- compose
  其实就是布尔积
  a.dot(b) -> 点乘,即内积
Mr1 o Mr2
compose
#+begin_src python :results output
  import numpy
  shit = numpy.array([[0,1,0],[1,1,1],[1,0,0]])
  fuck = numpy.array([[0,1,0],[0,1,1],[1,1,1]])
  # print(fuck.dot(shit))
  # print(shit.dot(fuck))

  print(shit.dot(fuck))
  print(fuck.dot(shit))
#+end_src

#+RESULTS:
: [[0 1 1]
:  [1 3 2]
:  [0 1 0]]
: [[1 1 1]
:  [2 1 1]
:  [2 2 1]]

** Directed Graphic(有向图)
all those edge vertex(顶点) direct to itself, called a loop
- reflective
  loop at every node
- symmetric
  There is edge vertex in every opposite direction
- anti-symmetric
  same as below, but *never*
- transitive
  a->b b->c and a->c


* 9-4 Transitive closure
意思很奇怪,
意思大概类似于:
- 关系R想满足关系Q,所附加的关系S为R到Q的closure

** 如何计算
见`Piece.org'
- 最简单的算法:
n个元素集合关系上的0-1矩阵,从R的1次到R的n次的并集
! 单独元素的个数,不是组合的个数

- 沃舍尔算法
#+begin_quote
从n行开始
检查n列中的元素有没有1存在，如果有，记下来该元素所在的行数，将该行的元素都与第n行的元素进行逻辑加法运算，但是其位置不变。
每次都使用上次的结果进行计算.
n + 1次运算用的是n的矩阵.
#+end_quote

* 9-5 Equivalence relation
(reflective symmetric transitive)
- Equivalence
use the Symbol `~'
a ~ b == a is equal to b

- Equivalence classed
The set of elements that are related to an element a

***  Partion
S 被分成不相交的n个子集.
- 由划分出的子集得出等价关系R:
求每个子集 *自己* 对 *自己* 的笛卡尔积

* [#A] 9-6 (poset)Partial Orderings 偏序
- Reflective,anti-symmetric,transitive
- short cut `poset'
Sample : a>=b
symbol: kinda wired looks like `<='
- a,b are elements of S
- if a poset b && b poset a
  a and b is comparable
  or they are anti-comparable 可比

- if all elements in S(a poset 偏序中) are comparable
  It's `Total order' *全序*

  Keywords:
- 字典顺序

- 哈赛图(haese)

- (极)最大元,最小元
- 上界,最小上界(least upper bound),最大下界(greatest lower bound).
- 格[lattices](偏序集每对元素都有最小上界和最大下界)
- 拓扑排序(偏序的线性化)
可以拿来在给有必须的完成次序的任务序列排序

