
** python
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
*** Base
:results {output, value}: Output results come from whatever the python code prints on stdout. Value results are the value of the last expression evaluated in the code block. Value mode is the default (as with other languages). In value mode you can use the following subtypes:
raw: value is inserted directly
pp: value is pretty-printed by python using pprint.pformat(%s), then inserted
file: value is interpreted as a filename to be interpolated when exporting; commonly used for graphics output.
:return: Appends a return statement to the end of the code block. Only when result-type is value, and not in session mode.
:python: Name of the command for executing Python code.
*** plot
Returning a plot from a ob-python block requires saving the figure to a file and returning the filename. In the example below, we extract this to a separate block that can be referred to by other code blocks. The :noweb strip-export header argument means to allow noweb syntax, but to hide the inserted code during export.
**** sample
# #+header: :noweb strip-export
# #+begin_src python :results value file :session :exports both
# import matplotlib, numpy
# import matplotlib.pyplot as plt
# fig=plt.figure(figsize=(4,2))
# x=numpy.linspace(-15,15)
# plt.plot(numpy.sin(x)/x)
# fig.tight_layout()
# <<savefig(figname="plot.png", width=10, height=5)>>
#+end_src
*** pandas
**** sample
#+name: pd2org
#+begin_src python :var df="df" :exports none
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+header: :prologue from tabulate import tabulate
#+header: :noweb strip-export
#+begin_src python :results value raw :exports both
  import pandas as pd
  df = pd.DataFrame({
      "a": [1,2,3],
      "b": [4,5,6]
  })
  <<pd2org("df")>>
#+end_src

#+RESULTS:
|   | a | b |
|---+---+---|
| 0 | 1 | 4 |
| 1 | 2 | 5 |
| 2 | 3 | 6 |







** Talking about Python
*** Template
#+begin_src python :results output

#+end_src

*** Build n struct actions
list action
#+begin_src python
  a:list = list()
  b:list = list()
  list(a-b) # 差
  set(a).difference(set(b))
  list(a^b) # 对称差
  set(a).symmetric_difference(set(b))
  list(a&b) # 交
  set(a).intersection(set(b))
  list(a|b) # 并
  set(a).union(set(b))

  # add to end
  a.append("shit")
  a+=[elements]

  # insert elements in index
  a.insert(index,element);
  a.index(elements) # return index

  # remove element in n place
  del a[index:index-p2]
  a.pop(3)

  # You can access it by num
  a[n] = 3

  # misc
  if elements in a:
      pass
  len()
  max()
#+end_src

#+RESULTS:

dict action
#+begin_src python
    d = {'a': 1, 'b': 2, 'c': 3}

    # 打印 key
    for i in d:
        print(i)

    #打印 value
    for i in d.values():
        print(i)
    # 打印key以及value
    for i in d.items():
        print(i)
    # 打印key，value
    for i,j in d.items():
        print(i,j)
#+end_src


*** 文件io
**** with open(...) as f:
还有乱七八糟的readline等等
#+begin_src python :results output
  a = list()
  # Another way
  # for line in open():
  with open("./in/a.txt") as f:
      for i in f:
          a.append(i)

  with open("./in/b.txt") as f:
      for i in f:
          a.append(i)

  a = sorted(a)
  file = open("./in/out.txt",mode="w")

  for shit in a:
      file.write(shit)

  file.close()
#+end_src

#+begin_quote
a.txt
张三 96 98
李四 67 89
王武 89 90

b.txt
This is sample
Another sample

out.txt
Another sample
This is sample
张三 96 98
李四 67 89
王武 89 90
#+end_quote


**** get variable from format string

#+begin_src python :results output

#+end_src

#+begin_src python :results output
#+end_src
*** 单元一实验
#+begin_src python :results output
  def work1():
      num = input("Enter a num")
      out = sum(map(int,num))
      print(out)


  def work2():
      # set1 = list(input().split())
      # set1 = list(map(int,input().split()))
      # set2 = list(map(int,input().split()))
      set1 = eval(input())
      set2 = eval(input())
      print(set1&set2)
      print(set1|set2)


  def zuoye1():
      theList = list(map(int,input().split()))
      print(min(theList))


  def zuoye2():
      theChoice = int(input())
      themap = { 1:"Mon",2:"Tue",3:"Wed",4:"Tur",5:"Fri",6:"Sat",7:"Sun" }
      print(themap[theChoice])


  def zuoye3():
      i = 10
      j:int =0
      for i in range(10,51):
          if i%3==0:
              print("{}".format(i),end=" ")
              j = j+1
          if j==5:
              print("")
              j = 0

  zuoye1()
  zuoye2()
  zuoye3()
#+end_src

#+RESULTS:

*** 单元二实验
#+begin_src python :results output
def narcissu():
    for i in range(100,1000):
        s = (i%10) **3 + (int(i/10)%10)**3 + int(i/100) ** 3
        if s == i:
            print(s)

def tranagle():
    start = 7
    for i in range(start,0,-2):
        for z in range( int((start-i)/2) ):
            print(" ",end="")
        for j in range(i):
            print("*",end="")
        for z in range(start-i):
            print(" ",end="")
        print("")

def productList():
    for i in range(1,10):
        for j in range(1,i+1):
            print("{}*{}={}".format(i,j,i*j),end=" ")
        print("")

narcissu()
tranagle()
productList()
#+end_src

#+RESULTS:
#+begin_example
153
370
371
407
,*******
 ,*****
  ,***
   ,*
1*1=1
2*1=2 2*2=4
3*1=3 3*2=6 3*3=9
4*1=4 4*2=8 4*3=12 4*4=16
5*1=5 5*2=10 5*3=15 5*4=20 5*5=25
6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
#+end_example

*** 单元三实验

**** 普通暴力法验证2000内的哥德巴赫猜想


#+begin_src python :results output
  import math
  import operator
  import numpy_indexed as npi
  def ifIsPrime(shit:int)->bool:
      out:int = 0
      for i in range(2,int(math.sqrt(shit)+1)):
          if shit % i == 0:
              out = 1
      if out == 0:
          return True
      else:
          return False

  # python 是真的慢
  def Goba():
      counter:int = 0
      theList:list = []
      outList:list = []
      for i in range(3,2000):
          if ifIsPrime(i):
              theList.append(i)

      flag:int = 0
      for i in range(8,2000,2):
          if flag==1:
              flag=0
              pass
          for j in range(len(theList)):
              for k in range(j+1,len(theList)):
                  if theList[j]+theList[k] == i:
                      flag = 1
                      outList.append(i)
                      break
              if flag == 1:
                  break

      print(npi.difference(range(8,2000,2),outList))
      # print(theList)
      # print(outList)


  Goba()
#+end_src

#+RESULTS:

**** 普通的发红包

普通的list和random库
#+begin_src python :results output
  import random

  fuck:list = [ "岢岚","加vi","虞城","写特","倒戈","迎客" ]
  shit:dict = {}
  def theLuckist():
      num:int = 0;
      theBig = 0
      outer = 0
      for i in fuck:
          theMoney = random.randint(1,10)
          shit[i] = theMoney;
          if theMoney > theBig:
              theBig = theMoney
              outer = num
          num = num + 1
      return outer

  print("%s Get my Bigest "%fuck[theLuckist()])
  print(shit)
#+end_src

#+RESULTS:
: 写特 Get my Bigest
: {'岢岚': 2, '加vi': 6, '虞城': 4, '写特': 10, '倒戈': 1, '迎客': 6}

**** fib
python的递归好丑,
还会遇到不能直接返回的问题
#+begin_src python :results output
  def __fib(num:int,state:int)->int:
      if num != 0:
          return (__fib(num-1,state+num))
      else:
          return state # This belongs to last funcall

  def fib(inpt:int)->int:
      return __fib(inpt,1)

  print(fib(199))
#+end_src

#+RESULTS:
: 19901
**** 文件io
***** with open(...) as f:
还有乱七八糟的readline等等
#+begin_src python :results output
  a = list()
  # Another way
  # for line in open():
  with open("./in/a.txt") as f:
      for i in f:
          a.append(i)

  with open("./in/b.txt") as f:
      for i in f:
          a.append(i)

  a = sorted(a)
  file = open("./in/out.txt",mode="w")

  for shit in a:
      file.write(shit)

  file.close()
#+end_src

#+begin_quote
a.txt
张三 96 98
李四 67 89
王武 89 90

b.txt
This is sample
Another sample

out.txt
Another sample
This is sample
张三 96 98
李四 67 89
王武 89 90
#+end_quote


***** get variable from format string

python do not have a equal =sscanf=
#+begin_src python :results output
#+end_src

#+RESULTS:
: shit

****

*** 单元四实验
#+begin_src python :stdin 4 :output results
  myDict:dict = dict()
  def readDict():
      print("Initalizing...\n")
      with open("./dict.txt") as theDict:
          fuck = list(str.split(theDict.read()))
          for i in range(0,len(fuck)-1,2):
              myDict[fuck[i]] = fuck[i+1]
          print(myDict)

  def addAction():
      inf = input("Sample input :\nboy 男孩\n").split()
      myDict[inf[0]] = inf[1]

  def writetoDict():
      print("Writing to dict")
      with open("./dict.txt",mode="w+") as theDict:
          for i,j in myDict.items():
              theDict.write(str.format("{} {} ".format(i,j)))

  def mainLoop():
      try:
          choice:int = int(input("Welcome! \n0 to print dict 1 to add, 2 to search, 3 to write to dict 4 to quit\n"))
      except:
          print("Error input! Restarting...")
          mainLoop()

      if choice == 1:
          addAction()
      elif choice == 0:
          for i,j in myDict.items():
              print(i,j)
      elif choice == 2:
          theKey = input("Enter you key(English)\n")
          print("That is {}".format(myDict[theKey]))
      elif choice == 3:
          writetoDict()
      elif choice ==4:
          print("bye!")
          exit()
      else:
          print("Error input! Restarting...")
      mainLoop()

  if __name__ == '__main__':
      readDict()
      mainLoop()
#+end_src

#+RESULTS:
    : Welcome!
    : 0 to print dict 1 to add, 2 to search, 3 to write to dict 4 to quit
    : boy 男孩
    : next 下一个
    : door 门
    : bye!




*** Basic of numpy
你可以用 array得到一个矩阵,

#+begin_src python :results output
  import numpy as np
  import numpy_indexed as npi # provide functions like intersection, powerful extension!
  M = np.array([[0,0,1,0,0],[0,0,0,1,0],[1,0,0,0,1],[0,0,1,0,0],[1,1,0,1,0]])
  N = M
  print(M)
  # for i in range(5):
  #     print(N.dot(M))
  #     N = N.dot(M)

  # You can use boolean variables to emulate 0-1 matrix
  shit:np.array = np.array([[False,False,True,False,False],[False,False,False,True,False],[True,False,False,False,False],[False,True,False,False,False],[False,False,False,True,False]])
  fuck = shit
  out = shit

  print(shit)

  print(npi.intersection(shit,fuck))
#+end_src

#+RESULTS:
#+begin_example
[[0 0 1 0 0]
 [0 0 0 1 0]
 [1 0 0 0 1]
 [0 0 1 0 0]
 [1 1 0 1 0]]
[[False False  True False False]
 [False False False  True False]
 [ True False False False False]
 [False  True False False False]
 [False False False  True False]]
[[False False False  True False]
 [False False  True False False]
 [False  True False False False]
 [ True False False False False]]
#+end_example

*** Template
分词：jieba库
#+begin_src python :results output
  a:list = list()
  print(a)
  print(a)
  a.pop()
  print(a)
  a[1] = 2
  print(a)
#+end_src

#+RESULTS:
